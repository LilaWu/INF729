package paristech

import org.apache.spark.SparkConf
import org.apache.spark.sql.{Column, ColumnName, DataFrame, SparkSession}
import org.apache.spark.sql.functions.udf
import org.apache.spark.sql.functions.when
import org.apache.spark.sql.functions.datediff
import org.apache.spark.sql.functions.round
import org.apache.spark.sql.functions.from_unixtime
import org.apache.spark.sql.functions.concat_ws
import org.apache.spark.sql.functions.lower


object Preprocessor {

  def main(args: Array[String]): Unit = {
    // Des réglages optionnels du job spark. Les réglages par défaut fonctionnent très bien pour ce TP.
    // On vous donne un exemple de setting quand même
    val conf = new SparkConf().setAll(Map(
      "spark.scheduler.mode" -> "FIFO",
      "spark.speculation" -> "false",
      "spark.reducer.maxSizeInFlight" -> "48m",
      "spark.serializer" -> "org.apache.spark.serializer.KryoSerializer",
      "spark.kryoserializer.buffer.max" -> "1g",
      "spark.shuffle.file.buffer" -> "32k",
      "spark.default.parallelism" -> "12",
      "spark.sql.shuffle.partitions" -> "12"
    ))

    // Initialisation du SparkSession qui est le point d'entrée vers Spark SQL (donne accès aux dataframes, aux RDD,
    // création de tables temporaires, etc., et donc aux mécanismes de distribution des calculs)
    val spark = SparkSession
      .builder
      .config(conf)
      .appName("TP Spark : Preprocessor")
      .getOrCreate()
    import spark.implicits._ //if don't import here then compiler doesn't understand the $ before "goal, deadline,..."

    /** *****************************************************************************
      *
      * TP 2
      *
      *       - Charger un fichier csv dans un dataFrame
      *       - Pre-processing: cleaning, filters, feature engineering => filter, select, drop, na.fill, join, udf, distinct, count, describe, collect
      *       - Sauver le dataframe au format parquet
      *
      * if problems with unimported modules => sbt plugins update
      *
      * *******************************************************************************/
    println("\n")
    println("Hello World ! from Preprocessor")
    println("\n")


    val df: DataFrame = spark
      .read
      .option("header", true) // utilise la première ligne du (des) fichier(s) comme header
      .option("inferSchema", "true") // pour inférer le type de chaque colonne (Int, String, etc.)
      .csv("/Users/didi/Documents/Telecom/INF729/Spark/train_clean.csv")

    val dfCasted: DataFrame = df
      .withColumn("goal", $"goal".cast("Int"))
      .withColumn("deadline", $"deadline".cast("Int"))
      .withColumn("state_changed_at", $"state_changed_at".cast("Int"))
      .withColumn("created_at", $"created_at".cast("Int"))
      .withColumn("launched_at", $"launched_at".cast("Int"))
      .withColumn("backers_count", $"backers_count".cast("Int"))
      .withColumn("final_status", $"final_status".cast("Int"))


    val df2: DataFrame = dfCasted.drop("disable_communication")
    val dfNoFutur: DataFrame = df2.drop("backers_count", "state_changed_at")

    def cleanCountry(country: String, currency: String): String = {
      if (country == "False")
        currency
      else
        country
    }

    def cleanCurrency(currency: String): String = {
      if (currency != null && currency.length != 3)
        null
      else
        currency
    }

    val cleanCountryUdf = udf(cleanCountry _)
    val cleanCurrencyUdf = udf(cleanCurrency _)

    val dfCountry: DataFrame = dfNoFutur
      .withColumn("country2", cleanCountryUdf($"country", $"currency"))
      .withColumn("currency2", cleanCurrencyUdf($"currency"))
      .drop("country", "currency")

    val dfFinal: DataFrame = dfCountry
      .withColumn("final_status", when($"final_status".isNull || $"final_status" =!= 1, 0).otherwise($"final_status"))

    val dfCampagne: DataFrame = dfFinal
      .withColumn("days_campaign", datediff(from_unixtime($"deadline"), from_unixtime($"created_at")))
      .withColumn("hours_prepa", round($"launched_at" / 60 - $"created_at" / 60))
      .withColumn("days_campaign", $"days_campaign".cast("Int"))
      .withColumn("hours_prepa", $"hours_prepa".cast("Int"))
      .withColumn("goal", $"goal".cast("Int"))

    val dfNoTime: DataFrame = dfCampagne
      .drop("launched_at", "created_at", "deadline")
      .withColumn("text", lower(concat_ws(" ", $"name", $"desc", $"keywords")))

    val monDataFrameFinal: DataFrame = dfNoTime
      .withColumn("days_campaign", when($"days_campaign".isNull,-1).otherwise($"days_campaign"))
      .withColumn("hours_prepa", when($"hours_prepa" .isNull,-1).otherwise($"hours_prepa"))
      .withColumn("goal", when($"goal".isNull,-1).otherwise($"goal"))
      .withColumn("currency2", when($"currency2".isNull,"unknown").otherwise($"currency2"))
      .withColumn("country2", when($"country2".isNull,"unknown").otherwise($"country2"))

    //dfNoTime.select("days_campaign").groupBy("days_campaign").count().show(100) //to see if days_compaign is converted

    monDataFrameFinal.show()
    monDataFrameFinal.write.parquet("src/main/resources/preprocessed")

  }
}
